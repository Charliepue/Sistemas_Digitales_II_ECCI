from machine import Pin
import time

# Configuración del LED y del sensor
led = Pin(15, Pin.OUT)  # GPIO2 para el LED
sensor = Pin(2, Pin.IN, Pin.PULL_DOWN)  # GPIO4 para el sensor con resistencia pull-up

# Variables de estado
alarma_activada = False
led_encendido = False

def anti_rebote(pin):
    """Función de interrupción con anti-rebote"""
    global alarma_activada, led_encendido
    time.sleep_ms(50)  # Pequeño retardo para evitar rebotes
    
    if pin.value() == 0:  # Verifica nuevamente el estado del pin
        if not led_encendido:  # Si el LED estaba apagado
            alarma_activada = True  # Inicia la secuencia de alarma
        else:  # Si el LED estaba encendido, apagarlo
            led.off()
            led_encendido = False

def alarma():
    """Función para hacer parpadear el LED durante 5 segundos"""
    global alarma_activada, led_encendido
    if alarma_activada:
        inicio = time.ticks_ms()
        while time.ticks_diff(time.ticks_ms(), inicio) < 5000:
            led.on()
            time.sleep(0.1)
            led.off()
            time.sleep(0.1)

        led.on()  # Mantiene el LED encendido después del parpadeo
        led_encendido = True
        alarma_activada = False  # Desactiva la alarma

# Configuración de la interrupción
sensor.irq(trigger=Pin.IRQ_FALLING, handler=anti_rebote)

# Bucle principal
while True:
    alarma()
    time.sleep(0.1)  # Pequeña espera para evitar uso excesivo de CPU
